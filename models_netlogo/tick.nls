;; ##### TICK FUNCTIONS #####

to update-health
  ask residents [
    set health health + table:get health-table medical-treatment
  ]
  ask residents with [health < 0][
    set deaths deaths + 1
    ;; TODO check if in ambulance, if so update ambulance
    die
  ]
  ask residents with [health > 1 and color = blue][
    set recovered recovered + 1
    if medical-treatment = "hospital" [ask one-of hospitals-here [set occupancy occupancy - 1]]
    type self print "RECOVERED!!"
    die
  ]
end

to call-112
  ifelse call-limit? [
    ;; WITH a call-limit
    ask crossings
    [ if any? residents-here with [not reported?]
      [
        let randomizer random-float 1
        if randomizer <  1 - ( 1 - probability-call-112 / 100 ) ^ total-residents
        [ ask one-of residents-here [ set tries-calling? true] ] 
      ]
    ]
    let amount-callers count residents with [calling?]
    ask up-to-n-of ( max-concurrent-calls - amount-callers ) residents with [tries-calling?] [
      set calling? true
      set tries-calling? false
      set time-call random-poisson average-call-time  ;; TODO: Make Gamma-distribution
    ]
    ask residents with [calling?] [
      set time-call time-call - 1
      if time-call <= 0 [
        ask residents-here [set reported? true]
        set calling? false
      ]
    ]
  ] [
  ;; WITHOUT a call-limit
    ask crossings
    [ if any? residents-here with [not reported?]
      [
        let randomizer random-float 1
        if randomizer <  1 - ( 1 - probability-call-112 / 100 ) ^ total-residents
        [ ask residents-here [ set reported? true ] ]
      ]
    ]
  ]
end

to go-ambulances
  nw:set-context turtles with [part-of-network?] roads with [color != red]
  ask ambulances with [reachable-patients?] [
    ;; Check if a new patient needs to be requested, a patient can be picked up or if arrived at hospital
    if not enroute? [request-new-patient initial-ambulance-search-radius]
    if not full? and member? destination crossings-here [pick-up-patient]
    if full? and member? destination hospitals-here [drop-off-patient]
    if enroute? and route != false and length route >= 2 [move-ambulances]
    if enroute? and route = false [plan-route]
  ]
  ask ambulances with [not reachable-patients?] [request-new-patient 300]
end

to move-ambulances
  let target-link road [who] of item 0 route [who] of item 1 route
  let target-color [color] of target-link
  ifelse target-color != blue and target-color != red [
    move-to item 1 route
    set route remove-item 0 route
  ][
    ask target-link [set color red]
    plan-route
    if route != false and length route >= 2 [move-ambulances] ;; Note the recursive use of this function in the "else" branch
  ]
end

to request-new-patient [increased-radius]
  if not any? residents with [medical-treatment = "none"] [die]
  ;; Get resident with lowest health in search radius that is reported
  let target-patient nobody
  ask one-of turtles-here with [part-of-network?] [
    let potential-crossings nw:turtles-in-radius increased-radius
    set potential-crossings potential-crossings with [any? residents-here with [reported? and medical-treatment = "none" and not help-underway?]]
    let potential-patients residents-on potential-crossings
    set target-patient min-one-of potential-patients with [reported? and medical-treatment = "none" and not help-underway?] [health] ;;TODO think about checked
  ]
  set patient target-patient

  ifelse patient != nobody [
    set destination one-of crossings-on patient
    ask patient [set help-underway? true]
    plan-route
    set enroute? true
    set reachable-patients? true
  ][
    ifelse increased-radius > 1900
      [set reachable-patients? false]
      [let new-radius increased-radius * 1.2  ;; recursively increase the radius with 20% untill a patient is found
       type self type " couldn't find patient, trying in radius " print new-radius
       request-new-patient new-radius]  
  ]
end

to plan-route
  if destination != nobody [
    nw:set-context turtles with [part-of-network?] roads with [color != red]
    ask one-of turtles-here with [part-of-network?] [
      let potential-route nw:turtles-on-path-to [destination] of myself
      ask myself [set route potential-route]
    ]
  ]
  if route = false and not full? [request-new-patient initial-ambulance-search-radius]
  if route = false and full? [find-hospital]
end

to pick-up-patient
  if patient != nobody [ask patient [set help-underway? false]]                      ;; Make the previously targetet patient available for help again, incase (s)he doesn't get picked up
  set patient min-one-of residents-here with [medical-treatment = "none"] [health]   ;; Pick up the most injured patient

  ifelse patient != nobody [
    ask patient [
      set medical-treatment "ambulance"
      set reported? true
    ]
    find-hospital
    plan-route
    set enroute? true
    set full? true
    type self type " picked up " print patient
  ][
    request-new-patient initial-ambulance-search-radius
  ]
end

to find-hospital
  nw:set-context turtles with [part-of-network?] roads with [color != red]
  let current-crossing one-of crossings-here
  set destination min-one-of hospitals with [capacity > occupancy] [nw:distance-to current-crossing]
  if destination = nobody [
    set route false
    type myself print "couldn't find hospital"
  ]
end

to drop-off-patient ;; TODO: Implement what happens if resident died in the journey
  ifelse patient = nobody
  [
    set destination nobody
    set full? false
    set enroute? false
    type self print " dropped off dead patient"
  ][
    type self type " dropped off " print patient
    ask patient [
      move-to [destination] of myself
      set medical-treatment "hospital"]
    ask destination [set occupancy occupancy + 1]
    set patient nobody

    set destination nobody
    set full? false
    set enroute? false
  ]
end

to update-hospitals
  ask hospitals [set label occupancy]
end