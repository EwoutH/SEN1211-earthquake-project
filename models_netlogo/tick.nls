;; ##### TICK FUNCTIONS #####

to update-health
  ask residents [
    set health health + table:get health-table medical-treatment
  ]
  ask residents with [health < 0][
    set deaths deaths + 1
    ;; TODO check if in ambulance, if so update ambulance
    die
  ]
  ask residents with [health > 1][
    set recovered recovered + 1  ;; TODO: Note that there are already residents in hospital, those should probably not be counted
    ;; TODO check if in hospital, if so update hospital occupancy
    die
  ]
end

to call-112
  ask crossings
  [ if any? residents-here with [not reported?]
    [
    let randomizer random-float 1
    if randomizer <  1 - ( 1 - probability-call-112 / 100 ) ^ total-residents
      [ ask residents-here [ set reported? true ] ] 
    ]
  ]
end

to go-ambulances
  nw:set-context turtles with [part-of-network?] roads with [color != red]
  ask ambulances [
    ;; Check if a new patient needs to be requested, a patient can be picked up or if arrived at hospital
    if not enroute? [request-new-patient 0] 
    if not full? and member? destination crossings-here [pick-up-patient]
    if full? and member? destination hospitals-here and patient != nobody [drop-off-patient]
    if enroute? [move-ambulances]
  ]
end

to move-ambulances
  let target-link road [who] of item 0 route [who] of item 1 route
  let target-color [color] of target-link
  ifelse target-color != blue and target-color != red [
    move-to item 1 route
    set route remove-item 0 route
  ][
    ask target-link [set color red]
    nw:set-context turtles with [part-of-network?] roads with [color != red]
    plan-route
    move-ambulances  ;; Note the recursive use of this function in the "else" branch
  ]
end

to request-new-patient [increased-radius]
  ;; Get resident with lowest health in search radius that is reported
  let target-patient nobody
  ask one-of turtles-here with [part-of-network?] [
    let potential-crossings nw:turtles-in-radius (initial-ambulance-search-radius + increased-radius)
    set potential-crossings potential-crossings with [any? residents-here with [reported? and medical-treatment = "none"]]
    let potential-patients residents-on potential-crossings
    print potential-patients
    set target-patient min-one-of potential-patients with [reported? and medical-treatment = "none"] [health] ;;TODO think about checked
  ]
  set patient target-patient

  ifelse patient != nobody [
    set destination one-of crossings-on patient
    plan-route
    set enroute? true
  ][
    type self type " couldn't find patient, trying in radius " print initial-ambulance-search-radius + increased-radius + 3
    request-new-patient increased-radius + 3  ;; recursively increase the radius untill a patient is found
  ]
end

to plan-route
  ask one-of turtles-here with [part-of-network?] [
    let potential-route nw:turtles-on-path-to [destination] of myself
    ask myself [set route potential-route]
  ]
end

to pick-up-patient
  set patient min-one-of residents-here with [medical-treatment = "none"] [health]

  ifelse patient != nobody [
    ask patient [
      set medical-treatment "ambulance"
      set reported? true
    ]
    let current-crossing one-of crossings-here
    set destination min-one-of hospitals with [capacity > occupancy] [nw:distance-to current-crossing]
    plan-route
    set enroute? true
    set full? true
    type self type " picked up " print patient
  ][
    request-new-patient 0
  ]
end

to drop-off-patient ;; TODO: Implement what happens if resident died in the journey
  type self type " dropped off " print patient
  ask patient [
    move-to [destination] of myself
    set medical-treatment "hospital"]
  ask destination [set occupancy occupancy + 1]
  set patient nobody
  set full? false
  set enroute? false
end

to update-hospitals
  ask hospitals [set label occupancy]
end