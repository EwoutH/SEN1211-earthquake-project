;; ##### TICK FUNCTIONS #####

to update-health
  ask residents [
    set health health + table:get health-table medical-treatment
  ]
  ask residents with [health < 0][
    set deaths deaths + 1
    die
  ]
  ask residents with [health > 1][
    set recovered recovered + 1  ;; TODO: Note that there are already residents in hospital, those should probably not be counted
    die
  ]
end

to call-112
  ask crossings 
  [ if any? residents-here with [not reported?]
    [
    let randomizer random-float 1
    if randomizer <  1 - ( 1 - probability-call-112 / 100 ) ^ total-residents
      [ ask residents-here [ set reported? true ] ] 
    ]
  ]
end

to go-ambulances
  nw:set-context turtles with [part-of-network?] roads with [color != red]
  ask ambulances [
    ;; Check if a new patient needs to be requested, a patient can be picked up or if arrived at hospital
    if not enroute? [request-new-patient] 
    if one-of crossings-at 0 0 = destination [pick-up-patient]  ;; TODO: write function
    if one-of hospitals-at 0 0 != 0 [drop-off-patient]          ;; TODO: write function
    if enroute? [move-ambulances]
  ]
end

to move-ambulances
  type "Route: " print route
  let target-link road [who] of item 0 route [who] of item 1 route
  let target-color [color] of target-link
  ifelse target-color != blue and target-color != red [
    move-to item 1 route
    set route remove-item 0 route
  ][
    ask target-link [set color red]
    nw:set-context turtles with [part-of-network?] roads with [color != red]
    set route nw:turtles-on-path-to destination

    move-ambulances  ;; Note the recursive use of this function in the "else" branch
  ]
end

to request-new-patient
  ;; Get resident with lowest health in search radius that is reported
  let target-patient nobody
  ask one-of crossings-at 0 0 [
    let potential-crossings nw:turtles-in-radius initial-ambulance-search-radius
    type "All potential crossings: " print potential-crossings
    set potential-crossings potential-crossings with [any? residents-here with [reported? and medical-treatment = "none"]]
    type "Potential crossings with reported residents: " print potential-crossings
    let potential-patients residents-on potential-crossings
    type "Potential patients: " print potential-patients
    set target-patient min-one-of potential-patients with [reported? and medical-treatment = "none"] [health] ;;TODO think about checked
    type "Target patients: " print target-patient
  ]
  set patient target-patient

  if patient != nobody [
    set destination one-of crossings-on patient
    type "Destination: " print destination
    ask one-of crossings-at 0 0 [
      let potential-route nw:turtles-on-path-to [destination] of myself
      ask myself [set route potential-route]
    ]
    set enroute? true
    type "Route: " print route
  ]
end

to pick-up-patient
  ask patient
  [set medical-treatment "ambulance"]
end

to drop-off-patient
  ask patient [
    set medical-treatment "hospital"]
end